/*
    MavServerMapper - Links a MAV Mission Client with an online MAV autopilot data source.
    Copyright (C) 2014 James Betker, Applied Analog LLC

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package com.appliedanalog.uav.socketmapper;

import java.awt.Color;
import java.awt.EventQueue;
import javax.swing.JLabel;

/**
 *
 * @author betker
 */
public class SocketMapperFrame extends javax.swing.JFrame {

    /**
     * Creates new form SocketMapper
     */
    public SocketMapperFrame() {
        initComponents();
        setTitle("IO Linker Server");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bStart = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tPort = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lExternalConnected = new javax.swing.JLabel();
        lMavConnected = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bStart.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bStart.setText("Start Mapper");
        bStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStartActionPerformed(evt);
            }
        });

        jLabel1.setText("UAV Mapping Server Port:");

        tPort.setText("9998");

        jLabel2.setText("Android Client:");

        jLabel3.setText("MAV Client:");

        lExternalConnected.setForeground(new java.awt.Color(255, 0, 0));
        lExternalConnected.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lExternalConnected.setText("Disconnected");

        lMavConnected.setForeground(new java.awt.Color(255, 0, 0));
        lMavConnected.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lMavConnected.setText("Disconnected");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lExternalConnected, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tPort, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lMavConnected, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lExternalConnected))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lMavConnected))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(bStart, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    IOEndpointServer externalServerEndpoint, mavServerEndpoint;
    EndpointConnector connector;
    boolean started = false;
    private void bStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStartActionPerformed
        if(started){
            externalServerEndpoint.stop();
            mavServerEndpoint.stop();
            System.exit(0);
        }
        try{
            int port = Integer.parseInt(tPort.getText());
            externalServerEndpoint = new IOEndpointServer(9999);
            mavServerEndpoint = new IOEndpointServer(port);
            connector = new EndpointConnector(externalServerEndpoint, mavServerEndpoint);
            
            externalServerEndpoint.setConnectionListener(new ServerEndpointConnectionListener(){
                @Override
                public void clientConnected() {
                    setConnected(lExternalConnected);
                }

                @Override
                public void clientDisconnected() {
                    setDisconnected(lExternalConnected);
                }
            });
            
            mavServerEndpoint.setConnectionListener(new ServerEndpointConnectionListener(){
                @Override
                public void clientConnected() {
                    setConnected(lMavConnected);
                }

                @Override
                public void clientDisconnected() {
                    setDisconnected(lMavConnected);
                }
            });
            
            mavServerEndpoint.start();
            externalServerEndpoint.start();
            bStart.setText("Stop");
            started = true;
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_bStartActionPerformed

    void setConnected(final JLabel lbl){
        EventQueue.invokeLater(new Runnable(){
            public void run(){
                lbl.setText("Connected");
                lbl.setForeground(Color.green);
            }
        });
    }
    
    void setDisconnected(final JLabel lbl){
        EventQueue.invokeLater(new Runnable(){
            public void run(){
                lbl.setText("Disconnected");
                lbl.setForeground(Color.red);
            }
        });
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SocketMapperFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SocketMapperFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SocketMapperFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SocketMapperFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SocketMapperFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lExternalConnected;
    private javax.swing.JLabel lMavConnected;
    private javax.swing.JTextField tPort;
    // End of variables declaration//GEN-END:variables
}
